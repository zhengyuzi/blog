import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.Xpy1Nj1z.js";const E=JSON.parse('{"title":"闭包","description":"","frontmatter":{},"headers":[],"relativePath":"JavaScript/闭包.md","filePath":"JavaScript/闭包.md","lastUpdated":1717483364000}'),t={name:"JavaScript/闭包.md"},l=n(`<h1 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h1><p>在了解闭包之前可以先去了解<em><strong>词法环境</strong></em>、<em><strong>执行上下文</strong></em>、<em><strong>垃圾回收机制</strong></em>，这里就不深度解读闭包了。</p><h2 id="什么是闭包" tabindex="-1">什么是闭包 <a class="header-anchor" href="#什么是闭包" aria-label="Permalink to &quot;什么是闭包&quot;">​</a></h2><p>在 JS 忍者秘籍(P90)中对闭包的定义：<strong>闭包允许函数访问并操作函数外部的变量</strong>。红宝书上对于闭包的定义：<strong>闭包是指有权访问另外一个函数作用域中的变量的函数</strong>。MDN对闭包的定义为：<strong>闭包是指那些能够访问自由变量的函数。这里的自由变量是外部函数作用域中的变量</strong>。概述上面的话，<strong>闭包是指有权访问另一个函数作用域中变量的函数</strong>。</p><h2 id="闭包产生的必要条件" tabindex="-1">闭包产生的必要条件 <a class="header-anchor" href="#闭包产生的必要条件" aria-label="Permalink to &quot;闭包产生的必要条件&quot;">​</a></h2><ol><li>存在函数嵌套。</li><li>嵌套的内部函数必须引用在外部函数中定义的变量。</li><li>嵌套的内部函数必须被执行。</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // c不在闭包中</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> increase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  increase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="闭包的作用" tabindex="-1">闭包的作用 <a class="header-anchor" href="#闭包的作用" aria-label="Permalink to &quot;闭包的作用&quot;">​</a></h2><ul><li><p>保持状态：闭包可以在函数执行完毕后，仍然保持外部函数的状态。这意味着闭包可以记住函数执行时的上下文环境，包括变量的值和状态，使得函数可以在之后的调用中继续使用这些状态。</p></li><li><p>实现私有变量：闭包可以在函数内部创建局部变量，并将其保留在内存中，即使函数执行完毕。这使得这些变量对外部是不可见的，实现了一种类似于私有变量的效果。</p></li><li><p>高阶函数的参数和返回值：闭包可以作为高阶函数的参数或返回值，使得函数可以更加灵活地组合和使用。</p></li></ul><p>需要注意的是，闭包保留了对外部作用域的引用，导致外部作用域的变量无法被垃圾回收机制释放，会导致内存泄漏，谨慎使用，避免滥用。合理利用闭包可以提高代码的可读性和灵活性，但如果滥用闭包或不当使用，可能会导致一些问题，如内存占用过高、性能损耗等。</p>`,10),e=[l];function h(p,r,k,d,o,c){return a(),i("div",null,e)}const y=s(t,[["render",h]]);export{E as __pageData,y as default};
